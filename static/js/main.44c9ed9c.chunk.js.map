{"version":3,"sources":["index.js"],"names":["Game","className","Board","React","Component","props","state","scoreArray","Array","fill","turn","gameOver","message","historyArray","i","checkTurn","copyScoreArray","this","slice","nextFill","setState","txtHistory","history","document","getElementsByClassName","log","createElement","att","createAttribute","value","setAttributeNode","toString","innerHTML","append","tempHistoryArray","length","att2","someoneWin","checkWin","filter","item","Square","onClick","handleClick","bind","renderSquare","id","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.44c9ed9c.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\"\n\nclass Game extends React.Component {\n    render() {\n        return(\n            <div>\n                <header>Tic-Tac-Toe</header>\n                <div className=\"gameBody\">\n                    <Board />\n\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            scoreArray: Array(9).fill(null),\n            turn: 1,\n            gameOver: false,\n            message: \"Player 1's turn (X)\",\n            historyArray: Array(9).fill(null),\n        }\n    }\n    handleClick(i) {\n        const copyScoreArray = this.state.scoreArray.slice();\n        let checkTurn;\n        if (!this.state.gameOver) {\n            if (!copyScoreArray[i]) {\n                let nextFill;\n                if (this.state.turn === 1) {\n                    nextFill = 'O';\n                    copyScoreArray[i] = 'X';\n                    checkTurn = 2;\n                } else {\n                    nextFill = 'X';\n                    copyScoreArray[i] = 'O';\n                    checkTurn = 1;\n                }    \n                this.setState({\n                    scoreArray: copyScoreArray,\n                    turn: checkTurn,\n                    message: `Player ${checkTurn}'s turn (${nextFill})`\n                });\n                // History\n                let history = document.getElementsByClassName(\"history\")[0];\n                let log = document.createElement(\"button\");\n                const att = document.createAttribute(\"class\");\n                \n                if (checkTurn === 1) {\n                    att.value = \"playerlog player-two\";\n                } else {\n                    att.value = \"playerlog player-one\";\n                }  \n                log.setAttributeNode(att);\n                let txtHistory;\n                if ( i <= 2 ) {\n                    txtHistory = i.toString();\n                    txtHistory = `0, ${txtHistory}`\n                } else if ( i <= 5 ) {\n                    txtHistory = (i-3).toString();\n                    txtHistory = `1, ${txtHistory}`\n                } else {\n                    txtHistory = (i-6).toString();\n                    txtHistory = `2, ${txtHistory}`\n                }\n                log.innerHTML = txtHistory;\n                history.append(log);\n\n                // Go to history\n                const tempHistoryArray = this.state.historyArray.slice();\n                tempHistoryArray[document.getElementsByClassName(\"playerlog\").length - 1] = copyScoreArray;\n                const att2 = document.createAttribute(\"data-log\");\n                att2.value = document.getElementsByClassName(\"playerlog\").length - 1;\n                log.setAttributeNode(att2);\n                this.setState({\n                    historyArray: tempHistoryArray, \n                })\n                // console.log(tempHistoryArray);\n                \n                if (checkWin(copyScoreArray)) {\n                    this.setState({\n                        gameOver: true,\n                        message: `Game over: Player ${this.state.turn} win`,\n                    });\n                } else {\n                    if(copyScoreArray.filter((item) => item != null).length === 9) {\n                        this.setState({\n                            gameOver: true,\n                            message: \"Draw\"\n                        })\n                    }\n                }  \n            }\n        }\n    }\n    renderSquare(i) {\n        return (\n            <Square \n                value={this.state.scoreArray[i]} \n                onClick={this.handleClick.bind(this, i)}       \n            />\n        );\n    } \n    render() {\n        return(\n            <div className=\"game\">\n                <div className=\"board\">\n                    <div className=\"board-row\">\n                        {this.renderSquare(0)}\n                        {this.renderSquare(1)}\n                        {this.renderSquare(2)}\n                        {this.renderSquare(3)}\n                        {this.renderSquare(4)}\n                        {this.renderSquare(5)}\n                        {this.renderSquare(6)}\n                        {this.renderSquare(7)}\n                        {this.renderSquare(8)}\n                    </div>\n                </div>\n                <div className=\"info\">\n                    <p className=\"player\">{this.state.message}</p>\n                    <div className=\"history\">\n                        <p id=\"x\">History: </p>\n                    </div>\n                </div>\n            </div>\n            \n        );\n    }\n}\n\nclass Square extends React.Component {\n    render() {\n        return(\n            <button \n                className=\"square\" \n                onClick={() => this.props.onClick()} >\n\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById(\"root\")\n);\n\nfunction checkWin(scoreArray) {\n    let someoneWin = false;\n    let i = 0;\n    // check row \n    while (i <= 6) {\n        if (scoreArray[i] != null && scoreArray[i+1] != null && scoreArray[i+2] != null) {\n            if (scoreArray[i] === scoreArray[i+1] && scoreArray[i+1] === scoreArray[i+2]) {\n                someoneWin = true;\n                break;\n            }\n        }\n        i += 3;\n    }\n    i = 0; // reset index\n    // check column\n    while (i <= 2) {\n        if (scoreArray[i] != null && scoreArray[i+3] != null && scoreArray[i+6] != null) {\n            if (scoreArray[i] === scoreArray[i+3] && scoreArray[i+3] === scoreArray[i+6]) {\n                someoneWin = true;\n                i = 0;\n                break;\n            }\n        }\n        i += 1;\n    }\n    i = 0; // reset index\n    // check diagonal\n    if (scoreArray[0] != null && scoreArray[4] != null && scoreArray[8] != null) {\n        if (scoreArray[0] === scoreArray[4] && scoreArray[4] === scoreArray[8]) {\n            someoneWin = true;\n        }\n    }\n    if (scoreArray[2] != null && scoreArray[4] != null && scoreArray[6] != null) {\n        if (scoreArray[2] === scoreArray[4] && scoreArray[4] === scoreArray[6]) {\n            someoneWin = true;\n        } \n    }\n    return someoneWin;\n}"],"sourceRoot":""}